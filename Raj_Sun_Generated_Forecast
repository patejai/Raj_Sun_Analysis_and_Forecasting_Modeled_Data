{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "400bad19-8073-44e7-8b76-f072e64893b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Temp\\ipykernel_22476\\4238353262.py:46: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_model['Date'] = pd.to_datetime(df_model['Date'])\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "11:51:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "11:51:41 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step\n",
      "Split 1 - ARIMA - MAE: 21.437011934753443, RMSE: 29.43477129371885, MAPE: 58.79650700327181%, MSE: 866.4057611135353, MBD: -6.2957081873190495, sMAPE: 47.83500059562026%, R-squared: -0.04796307941603151\n",
      "Split 1 - Prophet - MAE: 22.3450514588805, RMSE: 28.872381181179797, MAPE: 72.43596002221749%, MSE: 833.6143950713454, MBD: 1.468606908800427, sMAPE: 49.33247691647082%, R-squared: -0.00830020726284375\n",
      "Split 1 - XGBoost - MAE: 15.890296794446453, RMSE: 20.412781524130217, MAPE: 49.93258992561375%, MSE: 416.68164955187194, MBD: -0.032506025276416356, sMAPE: 37.09786878875729%, R-squared: 0.49600175322090245\n",
      "Split 1 - LSTM - MAE: 2.7203223289057386, RMSE: 3.7206620780591524, MAPE: 8.193495157479475%, MSE: 13.843326299107451, MBD: -1.6336632603405357, sMAPE: 8.526619121910443%, R-squared: 0.9832557728619806\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "11:53:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "11:53:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step\n",
      "Split 2 - ARIMA - MAE: 20.82264235299091, RMSE: 28.897510056382508, MAPE: 53.523014604829086%, MSE: 835.0660874587281, MBD: -8.23424235312006, sMAPE: 46.62068386443785%, R-squared: -0.08853979602947581\n",
      "Split 2 - Prophet - MAE: 23.65695860475594, RMSE: 29.028968337842038, MAPE: 82.26729732464264%, MSE: 842.6810027594355, MBD: 7.471138495630812, sMAPE: 51.084344728955855%, R-squared: -0.09846612218821038\n",
      "Split 2 - XGBoost - MAE: 15.271731872977456, RMSE: 19.441304024435613, MAPE: 47.54210569686046%, MSE: 377.9643021705363, MBD: -0.04157444471445573, sMAPE: 35.79637935073453%, R-squared: 0.5073094326663421\n",
      "Split 2 - LSTM - MAE: 2.449968992358433, RMSE: 3.5553206055664317, MAPE: 7.332549542744572%, MSE: 12.640304608365259, MBD: 1.1458224319033923, sMAPE: 6.899685972406412%, R-squared: 0.9835228914132854\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "11:57:21 - cmdstanpy - INFO - Chain [1] start processing\n",
      "11:57:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "Split 3 - ARIMA - MAE: 27.800875323498886, RMSE: 32.46178244779083, MAPE: 106.148998056867%, MSE: 1053.7673196877008, MBD: 17.20311604579444, sMAPE: 57.331543485884396%, R-squared: -0.39012597549516004\n",
      "Split 3 - Prophet - MAE: 21.96846471176831, RMSE: 27.85287490473725, MAPE: 74.23352096729437%, MSE: 775.782640458942, MBD: 3.6973234874875343, sMAPE: 48.88083399360598%, R-squared: -0.023409608261345527\n",
      "Split 3 - XGBoost - MAE: 15.23603116421269, RMSE: 19.36007046840195, MAPE: 48.56045186480241%, MSE: 374.81232854148936, MBD: -0.07060291597555353, sMAPE: 36.25600686489328%, R-squared: 0.5055489536382974\n",
      "Split 3 - LSTM - MAE: 0.8281351348467351, RMSE: 1.1553934507361971, MAPE: 2.4502029114610333%, MSE: 1.3349340260040972, MBD: -0.4253992011535711, sMAPE: 2.4623635662543366%, R-squared: 0.998238959938831\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "12:02:42 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:02:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "Split 4 - ARIMA - MAE: 24.03664710781758, RMSE: 29.055929636154605, MAPE: 87.55667244631282%, MSE: 844.2470470211675, MBD: 9.354646385308532, sMAPE: 52.457681671913946%, R-squared: -0.11566926147504097\n",
      "Split 4 - Prophet - MAE: 22.55774707688921, RMSE: 28.134451625887547, MAPE: 78.30230455554425%, MSE: 791.5473682894063, MBD: 5.2862386692530015, sMAPE: 50.1239900905199%, R-squared: -0.04602683647860295\n",
      "Split 4 - XGBoost - MAE: 15.234935370498643, RMSE: 19.311839520779934, MAPE: 48.67282817078971%, MSE: 372.94714567635776, MBD: -0.014010949969010048, sMAPE: 36.41040764851498%, R-squared: 0.507151765523991\n",
      "Split 4 - LSTM - MAE: 2.210465147212891, RMSE: 2.847903368089386, MAPE: 6.258736047399273%, MSE: 8.11055359397487, MBD: 2.075635823185687, sMAPE: 5.929525379652439%, R-squared: 0.9892819342747232\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "12:09:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:10:02 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step\n",
      "Split 5 - ARIMA - MAE: 20.681907113287007, RMSE: 27.74885704451936, MAPE: 60.10074084473905%, MSE: 769.9990672771718, MBD: -3.6986794795816174, sMAPE: 46.78671545042635%, R-squared: -0.018112607630047295\n",
      "Split 5 - Prophet - MAE: 21.099392139118056, RMSE: 27.50930685745239, MAPE: 66.93029492899855%, MSE: 756.7619637774771, MBD: 0.33571856767758945, sMAPE: 47.472639270568415%, R-squared: -0.0006101682969723576\n",
      "Split 5 - XGBoost - MAE: 15.145147714707337, RMSE: 19.268416271391835, MAPE: 48.1185009499977%, MSE: 371.2718656076376, MBD: 0.08883374842216588, sMAPE: 36.02700107552623%, R-squared: 0.5090947725818487\n",
      "Split 5 - LSTM - MAE: 0.8569849431166163, RMSE: 1.1946862349010678, MAPE: 2.3012934651753247%, MSE: 1.4272751998620894, MBD: -0.5240884968182529, sMAPE: 2.292029747673922%, R-squared: 0.9981128199535673\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "12:19:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:19:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "Split 6 - ARIMA - MAE: 21.876492475397278, RMSE: 31.57356753053011, MAPE: 48.82701935835855%, MSE: 996.8901666049452, MBD: -14.006829042730356, sMAPE: 49.33569288938171%, R-squared: -0.24481118076993136\n",
      "Split 6 - Prophet - MAE: 21.684998920376422, RMSE: 28.31021285738737, MAPE: 68.79342911868271%, MSE: 801.4681520305812, MBD: -0.06363416277343817, sMAPE: 48.42492773368257%, R-squared: -0.0007888031200222745\n",
      "Split 6 - XGBoost - MAE: 15.606404052352753, RMSE: 19.820798581869017, MAPE: 49.730316718256596%, MSE: 392.8640564230209, MBD: 0.016378526487262474, sMAPE: 36.90872866287017%, R-squared: 0.5094328479299701\n",
      "Split 6 - LSTM - MAE: 0.7091578847250037, RMSE: 0.9989864935591014, MAPE: 1.9081863305119073%, MSE: 0.9979740143135086, MBD: 0.48702514860997226, sMAPE: 1.87665116961283%, R-squared: 0.9987538354246526\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "12:32:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:32:38 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step\n",
      "Split 7 - ARIMA - MAE: 21.6494901153063, RMSE: 31.196809824001413, MAPE: 48.14780725048371%, MSE: 973.240943194911, MBD: -13.686110498861469, sMAPE: 48.56014618733103%, R-squared: -0.23826418158644747\n",
      "Split 7 - Prophet - MAE: 21.300665546336525, RMSE: 28.133637059830644, MAPE: 64.33024972837083%, MSE: 791.5015342142763, MBD: -1.779888987452243, sMAPE: 47.46567954343092%, R-squared: -0.007035314678470295\n",
      "Split 7 - XGBoost - MAE: 15.43294662276222, RMSE: 19.611922848584083, MAPE: 48.330023699637714%, MSE: 384.62751781881434, MBD: -0.06345525438677298, sMAPE: 36.25645039650034%, R-squared: 0.5106345639302208\n",
      "Split 7 - LSTM - MAE: 0.733863047317, RMSE: 1.0145744572896351, MAPE: 2.0497134998925413%, MSE: 1.0293613293845576, MBD: 0.5242673624024216, sMAPE: 2.0134407772288467%, R-squared: 0.998690333290025\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "12:44:25 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:44:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step\n",
      "Split 8 - ARIMA - MAE: 21.303478658209844, RMSE: 28.63886401078764, MAPE: 61.20022262117719%, MSE: 820.1845318283875, MBD: -3.98423090014555, sMAPE: 47.43741753843668%, R-squared: -0.019704466488209338\n",
      "Split 8 - Prophet - MAE: 21.572817517529863, RMSE: 28.386991974904742, MAPE: 66.07382806827033%, MSE: 805.8213133833062, MBD: -1.064034914162256, sMAPE: 47.867236046511294%, R-squared: -0.0018472192063745396\n",
      "Split 8 - XGBoost - MAE: 15.73019256082619, RMSE: 19.939285970127145, MAPE: 49.28996697490658%, MSE: 397.5751249985091, MBD: -0.1257626503249121, sMAPE: 36.8165042699947%, R-squared: 0.5057098555347856\n",
      "Split 8 - LSTM - MAE: 1.033300784607306, RMSE: 1.576721775942522, MAPE: 2.958514092007612%, MSE: 2.486051558731341, MBD: -0.7641448385840641, sMAPE: 3.047496112173197%, R-squared: 0.9969091859453785\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "12:58:22 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:58:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
      "  return get_prediction_index(\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:836: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m231/231\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step\n",
      "Split 9 - ARIMA - MAE: 22.000250652530518, RMSE: 31.756859983659435, MAPE: 47.832064382438425%, MSE: 1008.49815602175, MBD: -14.922354383450935, sMAPE: 49.76599254099131%, R-squared: -0.2830781066955921\n",
      "Split 9 - Prophet - MAE: 21.288200597145202, RMSE: 28.048154629308762, MAPE: 66.44715722105208%, MSE: 786.6989781096146, MBD: -0.7328298297967363, sMAPE: 47.5757222271%, R-squared: -0.0008905116436046523\n",
      "Split 9 - XGBoost - MAE: 15.416260707843529, RMSE: 19.658955575459206, MAPE: 48.95216133702761%, MSE: 386.4745343178786, MBD: -0.03521719025138801, sMAPE: 36.42417800214585%, R-squared: 0.5083015166485343\n",
      "Split 9 - LSTM - MAE: 0.6619882895746874, RMSE: 0.9864693935756474, MAPE: 1.9124322575023807%, MSE: 0.9731218644615057, MBD: 0.1714974016125445, sMAPE: 1.9017174277954942%, R-squared: 0.998761929952988\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:473: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "13:17:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "13:17:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[10], line 120\u001b[0m\n\u001b[0;32m    118\u001b[0m prophet_model \u001b[38;5;241m=\u001b[39m train_prophet(train_df)\n\u001b[0;32m    119\u001b[0m xgb_model \u001b[38;5;241m=\u001b[39m train_xgboost(train_df)\n\u001b[1;32m--> 120\u001b[0m lstm_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_lstm\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_df\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    122\u001b[0m \u001b[38;5;66;03m# Forecast for the validation period\u001b[39;00m\n\u001b[0;32m    123\u001b[0m arima_forecast \u001b[38;5;241m=\u001b[39m forecast_arima(arima_model, \u001b[38;5;28mlen\u001b[39m(val_df))\n",
      "Cell \u001b[1;32mIn[10], line 79\u001b[0m, in \u001b[0;36mtrain_lstm\u001b[1;34m(train_df)\u001b[0m\n\u001b[0;32m     77\u001b[0m model\u001b[38;5;241m.\u001b[39madd(Dense(\u001b[38;5;241m1\u001b[39m))\n\u001b[0;32m     78\u001b[0m model\u001b[38;5;241m.\u001b[39mcompile(optimizer\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124madam\u001b[39m\u001b[38;5;124m'\u001b[39m, loss\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmean_squared_error\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m---> 79\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m50\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m32\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverbose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m     80\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m model\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\utils\\traceback_utils.py:117\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    115\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    116\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 117\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    118\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\backend\\tensorflow\\trainer.py:318\u001b[0m, in \u001b[0;36mTensorFlowTrainer.fit\u001b[1;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq)\u001b[0m\n\u001b[0;32m    316\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m step, iterator \u001b[38;5;129;01min\u001b[39;00m epoch_iterator\u001b[38;5;241m.\u001b[39menumerate_epoch():\n\u001b[0;32m    317\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_train_batch_begin(step)\n\u001b[1;32m--> 318\u001b[0m     logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain_function\u001b[49m\u001b[43m(\u001b[49m\u001b[43miterator\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    319\u001b[0m     logs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_pythonify_logs(logs)\n\u001b[0;32m    320\u001b[0m     callbacks\u001b[38;5;241m.\u001b[39mon_train_batch_end(step, logs)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\util\\traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\eager\\polymorphic_function\\polymorphic_function.py:833\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[1;34m(self, *args, **kwds)\u001b[0m\n\u001b[0;32m    830\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    832\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[1;32m--> 833\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    835\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[0;32m    836\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\eager\\polymorphic_function\\polymorphic_function.py:878\u001b[0m, in \u001b[0;36mFunction._call\u001b[1;34m(self, *args, **kwds)\u001b[0m\n\u001b[0;32m    875\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[0;32m    876\u001b[0m \u001b[38;5;66;03m# In this case we have not created variables on the first call. So we can\u001b[39;00m\n\u001b[0;32m    877\u001b[0m \u001b[38;5;66;03m# run the first trace but we should fail if variables are created.\u001b[39;00m\n\u001b[1;32m--> 878\u001b[0m results \u001b[38;5;241m=\u001b[39m \u001b[43mtracing_compilation\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_function\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    879\u001b[0m \u001b[43m    \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_variable_creation_config\u001b[49m\n\u001b[0;32m    880\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    881\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_created_variables:\n\u001b[0;32m    882\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCreating variables on a non-first call to a function\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    883\u001b[0m                    \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m decorated with tf.function.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\eager\\polymorphic_function\\tracing_compilation.py:139\u001b[0m, in \u001b[0;36mcall_function\u001b[1;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[0;32m    137\u001b[0m bound_args \u001b[38;5;241m=\u001b[39m function\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39mbind(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    138\u001b[0m flat_inputs \u001b[38;5;241m=\u001b[39m function\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39munpack_inputs(bound_args)\n\u001b[1;32m--> 139\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_flat\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# pylint: disable=protected-access\u001b[39;49;00m\n\u001b[0;32m    140\u001b[0m \u001b[43m    \u001b[49m\u001b[43mflat_inputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcaptured_inputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfunction\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcaptured_inputs\u001b[49m\n\u001b[0;32m    141\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\eager\\polymorphic_function\\concrete_function.py:1322\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[1;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[0;32m   1318\u001b[0m possible_gradient_type \u001b[38;5;241m=\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[0;32m   1319\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (possible_gradient_type \u001b[38;5;241m==\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[0;32m   1320\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m executing_eagerly):\n\u001b[0;32m   1321\u001b[0m   \u001b[38;5;66;03m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[1;32m-> 1322\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_inference_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_preflattened\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1323\u001b[0m forward_backward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[0;32m   1324\u001b[0m     args,\n\u001b[0;32m   1325\u001b[0m     possible_gradient_type,\n\u001b[0;32m   1326\u001b[0m     executing_eagerly)\n\u001b[0;32m   1327\u001b[0m forward_function, args_with_tangents \u001b[38;5;241m=\u001b[39m forward_backward\u001b[38;5;241m.\u001b[39mforward()\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\eager\\polymorphic_function\\atomic_function.py:216\u001b[0m, in \u001b[0;36mAtomicFunction.call_preflattened\u001b[1;34m(self, args)\u001b[0m\n\u001b[0;32m    214\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcall_preflattened\u001b[39m(\u001b[38;5;28mself\u001b[39m, args: Sequence[core\u001b[38;5;241m.\u001b[39mTensor]) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Any:\n\u001b[0;32m    215\u001b[0m \u001b[38;5;250m  \u001b[39m\u001b[38;5;124;03m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[39;00m\n\u001b[1;32m--> 216\u001b[0m   flat_outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_flat\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    217\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39mpack_output(flat_outputs)\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\eager\\polymorphic_function\\atomic_function.py:251\u001b[0m, in \u001b[0;36mAtomicFunction.call_flat\u001b[1;34m(self, *args)\u001b[0m\n\u001b[0;32m    249\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m record\u001b[38;5;241m.\u001b[39mstop_recording():\n\u001b[0;32m    250\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_bound_context\u001b[38;5;241m.\u001b[39mexecuting_eagerly():\n\u001b[1;32m--> 251\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_bound_context\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_function\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m    252\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    253\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    254\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction_type\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mflat_outputs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    255\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    256\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    257\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m make_call_op_in_graph(\n\u001b[0;32m    258\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m    259\u001b[0m         \u001b[38;5;28mlist\u001b[39m(args),\n\u001b[0;32m    260\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_bound_context\u001b[38;5;241m.\u001b[39mfunction_call_options\u001b[38;5;241m.\u001b[39mas_attrs(),\n\u001b[0;32m    261\u001b[0m     )\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\eager\\context.py:1552\u001b[0m, in \u001b[0;36mContext.call_function\u001b[1;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[0;32m   1550\u001b[0m cancellation_context \u001b[38;5;241m=\u001b[39m cancellation\u001b[38;5;241m.\u001b[39mcontext()\n\u001b[0;32m   1551\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cancellation_context \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m-> 1552\u001b[0m   outputs \u001b[38;5;241m=\u001b[39m \u001b[43mexecute\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1553\u001b[0m \u001b[43m      \u001b[49m\u001b[43mname\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdecode\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mutf-8\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1554\u001b[0m \u001b[43m      \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_outputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1555\u001b[0m \u001b[43m      \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtensor_inputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1556\u001b[0m \u001b[43m      \u001b[49m\u001b[43mattrs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1557\u001b[0m \u001b[43m      \u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1558\u001b[0m \u001b[43m  \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1559\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1560\u001b[0m   outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute_with_cancellation(\n\u001b[0;32m   1561\u001b[0m       name\u001b[38;5;241m.\u001b[39mdecode(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mutf-8\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[0;32m   1562\u001b[0m       num_outputs\u001b[38;5;241m=\u001b[39mnum_outputs,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1566\u001b[0m       cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_context,\n\u001b[0;32m   1567\u001b[0m   )\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\tensorflow\\python\\eager\\execute.py:53\u001b[0m, in \u001b[0;36mquick_execute\u001b[1;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m     52\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[1;32m---> 53\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m \u001b[43mpywrap_tfe\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTFE_Py_Execute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_handle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdevice_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mop_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m     54\u001b[0m \u001b[43m                                      \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     55\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m     56\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "from datetime import datetime, timedelta\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "from prophet import Prophet\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from keras.models import Sequential\n",
    "from keras.layers import LSTM, Dense\n",
    "from keras.layers import Input\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "import openpyxl\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv('Trueliquor_store_sales_data.csv')\n",
    "\n",
    "# Ensure the 'Date' column is in datetime format\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "\n",
    "# Feature Engineering: Adding Day of Week, Month, and Is Weekend as Features\n",
    "df['day_of_week'] = df['Date'].dt.dayofweek\n",
    "df['month'] = df['Date'].dt.month\n",
    "df['quarter'] = df['Date'].dt.quarter\n",
    "df['is_weekend'] = df['day_of_week'].isin([5, 6]).astype(int)\n",
    "df['is_holiday'] = df['Date'].isin(pd.to_datetime(['2017-12-25', '2017-12-31'])).astype(int)\n",
    "\n",
    "# Create lag features\n",
    "for lag in range(1, 8):  # 1 to 7 days lag\n",
    "    df[f'lag_{lag}'] = df['Total Amount'].shift(lag)\n",
    "\n",
    "# Create rolling window features\n",
    "df['rolling_mean_7'] = df['Total Amount'].rolling(window=7).mean()\n",
    "df['rolling_std_7'] = df['Total Amount'].rolling(window=7).std()\n",
    "\n",
    "# Drop rows with NaN values after feature engineering\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Prepare data for modeling\n",
    "df_model = df[['Date', 'Total Amount', 'day_of_week', 'month', 'quarter', 'is_weekend', 'is_holiday', \n",
    "               'lag_1', 'lag_2', 'lag_3', 'lag_4', 'lag_5', 'lag_6', 'lag_7', \n",
    "               'rolling_mean_7', 'rolling_std_7']]\n",
    "\n",
    "# Ensure the 'Date' column is in datetime format\n",
    "df_model['Date'] = pd.to_datetime(df_model['Date'])\n",
    "\n",
    "# Use TimeSeriesSplit for cross-validation\n",
    "tscv = TimeSeriesSplit(n_splits=10)\n",
    "train_val_sets = [(df_model.iloc[train_index].copy(), df_model.iloc[val_index].copy()) for train_index, val_index in tscv.split(df_model)]\n",
    "\n",
    "def train_arima(train_df):\n",
    "    model = ARIMA(train_df['Total Amount'], order=(5, 1, 0))\n",
    "    model_fit = model.fit()\n",
    "    return model_fit\n",
    "\n",
    "def train_prophet(train_df):\n",
    "    model = Prophet()\n",
    "    model.fit(train_df.reset_index().rename(columns={'Date': 'ds', 'Total Amount': 'y'}))\n",
    "    return model\n",
    "\n",
    "def train_xgboost(train_df):\n",
    "    model = GradientBoostingRegressor()\n",
    "    X_train = train_df.drop(columns=['Total Amount', 'Date'])\n",
    "    y_train = train_df['Total Amount']\n",
    "    model.fit(X_train, y_train)\n",
    "    return model\n",
    "\n",
    "def train_lstm(train_df):\n",
    "    X_train = train_df.drop(columns=['Total Amount', 'Date']).values\n",
    "    y_train = train_df['Total Amount'].values\n",
    "    X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))\n",
    "\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))\n",
    "    model.add(LSTM(50))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "    model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=0)\n",
    "    return model\n",
    "\n",
    "def forecast_arima(model, steps):\n",
    "    forecast = model.forecast(steps)\n",
    "    return forecast\n",
    "\n",
    "def forecast_prophet(model, steps):\n",
    "    future = model.make_future_dataframe(periods=steps)\n",
    "    forecast = model.predict(future)\n",
    "    return forecast['yhat'][-steps:].values\n",
    "\n",
    "def forecast_xgboost(model, val_df):\n",
    "    X_val = val_df.drop(columns=['Total Amount', 'Date'])\n",
    "    forecast = model.predict(X_val)\n",
    "    return forecast\n",
    "\n",
    "def forecast_lstm(model, val_df):\n",
    "    X_val = val_df.drop(columns=['Total Amount', 'Date']).values\n",
    "    X_val = X_val.reshape((X_val.shape[0], X_val.shape[1], 1))\n",
    "    forecast = model.predict(X_val)\n",
    "    return forecast.flatten()\n",
    "\n",
    "def evaluate_model(y_true, y_pred):\n",
    "    mae = mean_absolute_error(y_true, y_pred)\n",
    "    rmse = np.sqrt(mean_squared_error(y_true, y_pred))\n",
    "    mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n",
    "    mse = mean_squared_error(y_true, y_pred)\n",
    "    mbd = np.mean(y_pred - y_true)\n",
    "    smape = np.mean(2 * np.abs(y_pred - y_true) / (np.abs(y_pred) + np.abs(y_true))) * 100\n",
    "    r_squared = r2_score(y_true, y_pred)\n",
    "    return mae, rmse, mape, mse, mbd, smape, r_squared\n",
    "\n",
    "# Perform evaluation for each split\n",
    "results = { 'ARIMA': [], 'Prophet': [], 'XGBoost': [], 'LSTM': [] }\n",
    "\n",
    "for i, (train_df, val_df) in enumerate(train_val_sets):\n",
    "    # Train models for this split\n",
    "    arima_model = train_arima(train_df)\n",
    "    prophet_model = train_prophet(train_df)\n",
    "    xgb_model = train_xgboost(train_df)\n",
    "    lstm_model = train_lstm(train_df)\n",
    "    \n",
    "    # Forecast for the validation period\n",
    "    arima_forecast = forecast_arima(arima_model, len(val_df))\n",
    "    prophet_forecast = forecast_prophet(prophet_model, len(val_df))\n",
    "    xgb_forecast = forecast_xgboost(xgb_model, val_df)\n",
    "    lstm_forecast = forecast_lstm(lstm_model, val_df)\n",
    "    \n",
    "    # Evaluate each model\n",
    "    models = { 'ARIMA': arima_forecast, 'Prophet': prophet_forecast, 'XGBoost': xgb_forecast, 'LSTM': lstm_forecast }\n",
    "    \n",
    "    for model_name, forecast in models.items():\n",
    "        eval_results = evaluate_model(val_df['Total Amount'], forecast)\n",
    "        results[model_name].append(eval_results)\n",
    "        print(f\"Split {i+1} - {model_name} - MAE: {eval_results[0]}, RMSE: {eval_results[1]}, MAPE: {eval_results[2]}%, MSE: {eval_results[3]}, MBD: {eval_results[4]}, sMAPE: {eval_results[5]}%, R-squared: {eval_results[6]}\")\n",
    "\n",
    "# Forecasting for 2025 using the trained models from the last split\n",
    "future_steps = 365\n",
    "future_dates = pd.date_range(start='2025-01-01', periods=future_steps)\n",
    "future_df = pd.DataFrame({'Date': future_dates})\n",
    "future_df['day_of_week'] = future_df['Date'].dt.dayofweek\n",
    "future_df['month'] = future_df['Date'].dt.month\n",
    "future_df['quarter'] = future_df['Date'].dt.quarter\n",
    "future_df['is_weekend'] = future_df['day_of_week'].isin([5, 6]).astype(int)\n",
    "future_df['is_holiday'] = future_df['Date'].isin(pd.to_datetime(['2025-12-25', '2025-12-31'])).astype(int)\n",
    "\n",
    "arima_forecast_2025 = forecast_arima(arima_model, future_steps)\n",
    "prophet_forecast_2025 = forecast_prophet(prophet_model, future_steps)\n",
    "xgb_forecast_2025 = forecast_xgboost(xgb_model, future_df)\n",
    "lstm_forecast_2025 = forecast_lstm(lstm_model, future_df)\n",
    "\n",
    "def save_forecast_to_excel(forecast, model_name):\n",
    "    dates = pd.date_range(start='2025-01-01', periods=len(forecast))\n",
    "    forecast_df = pd.DataFrame({'Date': dates, 'Forecast': forecast})\n",
    "    forecast_df.to_excel(f'{model_name}_2025_forecast.xlsx', index=False)\n",
    "\n",
    "# Save forecasts to Excel\n",
    "save_forecast_to_excel(arima_forecast_2025, 'ARIMA')\n",
    "save_forecast_to_excel(prophet_forecast_2025, 'Prophet')\n",
    "save_forecast_to_excel(xgb_forecast_2025, 'XGBoost')\n",
    "save_forecast_to_excel(lstm_forecast_2025, 'LSTM')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "88230f33-f382-42a2-9418-52557dab2a13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\smart\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\rnn\\rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73/73 - 5s - 68ms/step - loss: 0.0387\n",
      "Epoch 2/20\n",
      "73/73 - 1s - 7ms/step - loss: 0.0209\n",
      "Epoch 3/20\n",
      "73/73 - 1s - 10ms/step - loss: 0.0204\n",
      "Epoch 4/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0204\n",
      "Epoch 5/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0205\n",
      "Epoch 6/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0203\n",
      "Epoch 7/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0202\n",
      "Epoch 8/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0201\n",
      "Epoch 9/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0202\n",
      "Epoch 10/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0203\n",
      "Epoch 11/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0202\n",
      "Epoch 12/20\n",
      "73/73 - 1s - 9ms/step - loss: 0.0200\n",
      "Epoch 13/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0201\n",
      "Epoch 14/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0201\n",
      "Epoch 15/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0200\n",
      "Epoch 16/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0203\n",
      "Epoch 17/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0199\n",
      "Epoch 18/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0201\n",
      "Epoch 19/20\n",
      "73/73 - 1s - 9ms/step - loss: 0.0199\n",
      "Epoch 20/20\n",
      "73/73 - 1s - 8ms/step - loss: 0.0200\n",
      "Transactions saved to C:\\Users\\smart\\TRUETransactions_2025.xlsx\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime, timedelta\n",
    "from keras.models import Sequential\n",
    "from keras.layers import LSTM, Dense\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import random\n",
    "import xlsxwriter\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv('Trueliquor_store_sales_data.csv')\n",
    "\n",
    "# Ensure the 'Date' column is in datetime format\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "\n",
    "# Feature Engineering\n",
    "df['day_of_week'] = df['Date'].dt.dayofweek\n",
    "df['month'] = df['Date'].dt.month\n",
    "df['quarter'] = df['Date'].dt.quarter\n",
    "df['is_weekend'] = df['day_of_week'].isin([5, 6]).astype(int)\n",
    "df['is_holiday'] = df['Date'].isin(pd.to_datetime(['2017-12-25', '2017-12-31'])).astype(int)\n",
    "\n",
    "# Aggregate daily sales\n",
    "df_daily_sales = df.groupby('Date')['Total Amount'].sum().reset_index()\n",
    "df_daily_sales = df_daily_sales.rename(columns={'Date': 'ds', 'Total Amount': 'y'})\n",
    "\n",
    "# Normalize the data\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "df_daily_sales['y'] = scaler.fit_transform(df_daily_sales[['y']])\n",
    "\n",
    "# Prepare the data for LSTM\n",
    "def create_dataset(data, look_back=1):\n",
    "    X, Y = [], []\n",
    "    for i in range(len(data) - look_back - 1):\n",
    "        a = data[i:(i + look_back), 0]\n",
    "        X.append(a)\n",
    "        Y.append(data[i + look_back, 0])\n",
    "    return np.array(X), np.array(Y)\n",
    "\n",
    "# Hyperparameters\n",
    "look_back = 7\n",
    "\n",
    "# Create the dataset\n",
    "dataset = df_daily_sales['y'].values\n",
    "dataset = dataset.reshape(-1, 1)\n",
    "train_size = int(len(dataset) * 0.8)\n",
    "train, test = dataset[:train_size], dataset[train_size:]\n",
    "\n",
    "X_train, y_train = create_dataset(train, look_back)\n",
    "X_test, y_test = create_dataset(test, look_back)\n",
    "\n",
    "# Reshape input to be [samples, time steps, features]\n",
    "X_train = np.reshape(X_train, (X_train.shape[0], look_back, 1))\n",
    "X_test = np.reshape(X_test, (X_test.shape[0], look_back, 1))\n",
    "\n",
    "# Create and fit the LSTM network\n",
    "model = Sequential()\n",
    "model.add(LSTM(50, return_sequences=True, input_shape=(look_back, 1)))\n",
    "model.add(LSTM(50))\n",
    "model.add(Dense(1))\n",
    "model.compile(loss='mean_squared_error', optimizer='adam')\n",
    "model.fit(X_train, y_train, epochs=20, batch_size=32, verbose=2)\n",
    "\n",
    "# Generate future dates for the year 2025\n",
    "future_dates = pd.date_range(start='2025-01-01', end='2025-12-31')\n",
    "\n",
    "# Initialize predictions with the last values from the original dataset\n",
    "last_values = df_daily_sales['y'].values[-look_back:]\n",
    "predictions = []\n",
    "\n",
    "for _ in range(len(future_dates)):\n",
    "    X = last_values[-look_back:].reshape((1, look_back, 1))\n",
    "    yhat = model.predict(X, verbose=0)\n",
    "    predictions.append(yhat[0, 0])\n",
    "    last_values = np.append(last_values, yhat[0, 0])\n",
    "\n",
    "# Inverse transform the predictions\n",
    "predictions = np.array(predictions).reshape(-1, 1)\n",
    "predictions = scaler.inverse_transform(predictions).flatten()\n",
    "\n",
    "# Adjust predictions to match the $4 million annual revenue\n",
    "total_forecasted_revenue = predictions.sum()\n",
    "scaling_factor = 4000000 / total_forecasted_revenue\n",
    "predictions *= scaling_factor\n",
    "\n",
    "# Simulate transactions based on historical patterns\n",
    "def simulate_transactions(df, forecast, future_dates):\n",
    "    transaction_data = []\n",
    "    historical_patterns = df[['Time', 'Customer ID', 'Item Purchased', 'Brand', 'Category', 'Quantity', 'Price per Unit', 'Payment Method', 'Margin']]\n",
    "\n",
    "    for i, total_amount in enumerate(forecast):\n",
    "        num_transactions = random.randint(100, 200)  # Further increase the number of transactions per day\n",
    "        current_total = 0\n",
    "        transactions_for_the_day = []\n",
    "        while current_total < total_amount:\n",
    "            transaction = historical_patterns.sample(n=1).to_dict(orient='records')[0]\n",
    "            transaction['Date'] = future_dates[i]\n",
    "            transaction['Transaction ID'] = f'T{random.randint(1000, 9999)}'\n",
    "            transaction['Total Amount'] = transaction['Quantity'] * transaction['Price per Unit']\n",
    "            current_total += transaction['Total Amount']\n",
    "            transactions_for_the_day.append(transaction)\n",
    "            if current_total >= total_amount:\n",
    "                break\n",
    "        # Scale down the last transaction if it overshoots the total_amount\n",
    "        if current_total > total_amount:\n",
    "            overshoot_amount = current_total - total_amount\n",
    "            transactions_for_the_day[-1]['Total Amount'] -= overshoot_amount\n",
    "        transaction_data.extend(transactions_for_the_day)\n",
    "    \n",
    "    return pd.DataFrame(transaction_data)\n",
    "\n",
    "# Generate simulated transactions for 2025\n",
    "simulated_transactions = simulate_transactions(df, predictions, future_dates)\n",
    "\n",
    "# Save simulated transactions to Excel with exception handling\n",
    "def save_transactions_to_excel(transactions, filename):\n",
    "    try:\n",
    "        writer = pd.ExcelWriter(filename, engine='xlsxwriter')\n",
    "        transactions.to_excel(writer, sheet_name='Sheet1', index=False)\n",
    "        writer.close()\n",
    "        print(f'Transactions saved to {os.path.abspath(filename)}')\n",
    "    except PermissionError:\n",
    "        new_filename = filename.split('.xlsx')[0] + '_new.xlsx'\n",
    "        writer = pd.ExcelWriter(new_filename, engine='xlsxwriter')\n",
    "        transactions.to_excel(writer, sheet_name='Sheet1', index=False)\n",
    "        writer.close()\n",
    "        print(f'Permission denied. Transactions saved to {os.path.abspath(new_filename)} instead.')\n",
    "\n",
    "save_transactions_to_excel(simulated_transactions, 'TRUETransactions_2025.xlsx')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1eff1c3f-f890-4724-a74d-69f77beb5eec",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
